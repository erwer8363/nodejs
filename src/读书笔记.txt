如何理解原型和原型链
把所有的对象的公用的属性全部放在堆内存的一个对象(共用属性组成的对象)上,然后让每一个对象的_proto_存储这个[公用属性组成的对象]的地址.
这个共用属性就是原型,原型出现的目的就是为了减少不必要的内存消耗,而原型链就是对象通过_proto_向当前实例所属类的原型上查找属性或方法的机制,
如果找到Object的原型上还是没有找到想要的属性或者方法则查找结束,最终返回undefined

Dom Diff 原理
如果元素类型发生变化,则直接替换
如果是文本，则比较文本里面的内容，是否有差异，如果是元素就需要比较当前元素的属性是否相等,会先比较key，
在比较类型 为什么 react中循环 建议不要使用索引 ,如果纯为了展示 那可以使用索引

this指向
全局作用域下的this指向window
如果给元素的事件行为绑定函数，那么函数中的this指向当前被绑定的那个元素
函数中的this，要看函数执行前有没有 . , 有 . 的话，点前面是谁，this就指向谁，如果没有点，指向window
自执行函数中的this永远指向window
定时器中函数的this指向window
构造函数中的this指向当前的实例
call、apply、bind可以改变函数的this指向
箭头函数中没有this，如果输出this，就会输出箭头函数定义时所在的作用域中的this


阻止冒泡事件event.stopPropagation()
阻止默认行为event.preventDefault()

setTimeout 和 setInterval的机制
因为js是单线程的。浏览器遇到etTimeout 和 setInterval会先执行完当前的代码块，在此之前会把定时器推入浏览器的
待执行时间队列里面，等到浏览器执行完当前代码之后会看下事件队列里有没有任务，有的话才执行定时器里的代码

vuex有哪几种状态和属性
state中保存着共有数据，数据是响应式的
getter可以对state进行计算操作，主要用来过滤一些数据，可以在多组件之间复用
mutations定义的方法动态修改state中的数据，通过commit提交方法，方法必须是同步的
actions将mutations里面处理数据的方法变成异步的，就是异步操作数据，通store.dispatch来分发actions，把异步的方法写在actions中，
通过commit提交mutations，进行修改数据。
modules：模块化vuex

vue中key的作用
当 Vue.js 用v-for正在更新已渲染过的元素列表时，它默认用“就地复用”策略。
如果数据项的顺序被改变，Vue 将不会移动 DOM 元素来匹配数据项的顺序，而是简单复用此处每个元素，
并且确保它在特定索引下显示已被渲染过的每个元素。
key的作用主要是为了高效的更新虚拟DOM。

vue修饰符
stop：阻止事件的冒泡
prevent：阻止事件的默认行为
once：只触发一次
self：只触发自己的事件行为时，才会执行
